class Demonstration {
    public static void main( String args[]) throws Exception {

        Thread t = new Thread(() -> {
            System.out.println("Hello from thread !");
        });

        t.start();
        t.join();
      
    }
}




import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Demonstration {
    public static void main( String args[] ) throws Exception {
        usingExecutorService();
        usingThread();
        
    }
  
    static void usingExecutorService() {
        // Anoymous class
        Callable<Void> task = new Callable<Void>() {

            @Override
            public Void call() throws Exception {
                System.out.println("Using callable with executor service.");
                return null;
            }
        };

        ExecutorService executorService = Executors.newFixedThreadPool(5);
        executorService.submit(task);
        executorService.shutdown();      
    }
  
    static void usingThread() throws Exception {
        // Anoymous class
        Callable<Void> task = new Callable<Void>() {

            @Override
            public Void call() throws Exception {
                System.out.println("Using callable indirectly with instance of thread class");
                return null;
            }
        };

        // creating future task
        FutureTask<Void> ft = new FutureTask<>(task);
        Thread t = new Thread(ft);
        t.start();
        t.join();      
      
    }
  
}






class Demonstration {
    public static void main( String args[] ) throws Exception{
      
      Thread[] tasks = new Thread[10]; 
      for(int i = 0;i<10;i++) {
        tasks[i] = new Task(i);
        tasks[i].start();
      }
      
      for(int i = 0;i<10;i++) {
        tasks[i].join();
      }
    }
}

class Task<T extends Number> extends Thread {

    T item;

    public Task(T item) {
        this.item = item;
    }

    public void run() {
        System.out.println("square root is: " + Math.sqrt(item.doubleValue()));
    }
}







