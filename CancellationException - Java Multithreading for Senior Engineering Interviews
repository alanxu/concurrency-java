import java.util.concurrent.*;

class Demonstration {
    public static void main( String args[] ) {

        ExecutorService es = Executors.newFixedThreadPool(5);

        // Create a FutureTask, which takes in an instance of Callable
        FutureTask<Integer> futureTask = new FutureTask<>(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {

                // The task simply intends to sleep for an hour but one second at a time
                for (int i = 0; i < 3600; i++) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ie) {
                        System.out.println("Thead " + Thread.currentThread().getName() + " has been interrupted");
                        break;
                    }
                }
                return 786;
            }
        });

        try {
            es.submit(futureTask);
            Thread.sleep(3000);
            futureTask.cancel(true);
            futureTask.get();
        } catch (InterruptedException | ExecutionException e) {
            // ignore exceptions since this is a demo
        } finally {
            // remember to shutdown the executor service
            es.shutdown();
        }
    }
}